import numpy as np
import matplotlib.pyplot as plt

# Define the quadratic function f(x) = 0.5 * x^T * A * x + b^T * x
def f(A, x, b):
    return 0.5 * np.dot(x, np.dot(A, x)) + np.dot(b, x)

# Coordinate Descent Method with trajectory tracking
def coord_descent(A, b, x_init, h_initial, tol_f=1e-6, tol_x=1e-6, max_iter=100000):
    x = x_init.copy()
    f_current = f(A, x, b)
    f_history = [f_current]
    x_history = [x.copy()]
    n = len(x)
    iter_count = 0
    h = h_initial
    reduction_factor = 0.5
    h_min = tol_x
    max_adjust_steps = 20  # Maximum number of step size adjustments

    while iter_count < max_iter:
        x_prev = x.copy()
        f_prev = f_current
        improvement = False  # Flag to track improvements

        for i in range(n):
            # Try decreasing i-th coordinate by step h
            x_new = x.copy()
            x_new[i] -= h
            f_new = f(A, x_new, b)

            if f_new < f_current:
                # Accept the step if function value decreases
                x[i] -= h
                f_current = f_new
                f_history.append(f_current)
                x_history.append(x.copy())
                improvement = True
                h = h_initial  # Reset step size after successful step
                continue

            # Try increasing i-th coordinate by step h
            x_new = x.copy()
            x_new[i] += h
            f_new = f(A, x_new, b)

            if f_new < f_current:
                # Accept the step if function value decreases
                x[i] += h
                f_current = f_new
                f_history.append(f_current)
                x_history.append(x.copy())
                improvement = True
                h = h_initial  # Reset step size after successful step
                continue

            # If neither decrease nor increase helped, reduce the step size
            h_temp = h

            for _ in range(max_adjust_steps):
                h_temp *= reduction_factor
                if h_temp < h_min:
                    break  # Stop attempts if step size becomes too small

                # Try decreasing coordinate with new step size
                x_new = x.copy()
                x_new[i] -= h_temp
                f_new = f(A, x_new, b)
                if f_new < f_current:
                    x[i] -= h_temp
                    f_current = f_new
                    f_history.append(f_current)
                    x_history.append(x.copy())
                    improvement = True
                    h = h_initial  # Reset step size after successful step
                    break

                # Try increasing coordinate with new step size
                x_new = x.copy()
                x_new[i] += h_temp
                f_new = f(A, x_new, b)
                if f_new < f_current:
                    x[i] += h_temp
                    f_current = f_new
                    f_history.append(f_current)
                    x_history.append(x.copy())
                    improvement = True
                    h = h_initial  # Reset step size after successful step
                    break

            else:
                # If no improvement after all attempts, keep the step size as is
                h = h_min

        # Check for convergence
        delta_x = np.linalg.norm(x - x_prev)
        delta_f = abs(f_current - f_prev)

        if delta_x < tol_x and delta_f < tol_f:
            print(f'Coordinate Descent converged in {iter_count} iterations.')
            break

        iter_count += 1

        # Optionally: print intermediate results
        if iter_count % 1000 == 0:
            print(f'Coordinate Descent Iteration {iter_count}: f(x) = {f_current}')

        # If no improvements during the whole iteration, reduce the global step size
        if not improvement:
            h *= reduction_factor
            if h < tol_x:
                print('Step size too small, stopping iterations.')
                break

    else:
        print('Coordinate Descent reached the maximum number of iterations without convergence.')

    return x, f_history, x_history

# Gradient Descent Method with trajectory tracking and constraint
def gradient_descent(A, b, x0, r, alpha=0.1, epsilon=1e-6, max_iter=1000):
    x = x0.copy()
    grad = A @ x + b  # Gradient of the function
    trajectory = [x.copy()]  # Store trajectory
    f_history = [f(A, x, b)]  # Store function values
    iterations = 0

    while np.linalg.norm(grad) > epsilon and iterations < max_iter:
        x_new = x - alpha * grad  # Update point

        # Check for constraint violation and project if necessary
        if np.linalg.norm(x_new - x0) > r:
            x_new = x0 + r * (x_new - x0) / np.linalg.norm(x_new - x0)

        x = x_new  # Update current point
        grad = A @ x + b  # Compute new gradient
        trajectory.append(x.copy())  # Add point to trajectory
        f_history.append(f(A, x, b))  # Add function value
        iterations += 1  # Increment iteration counter

    print(f'Gradient Descent converged in {iterations} iterations.')
    return x, iterations, np.array(trajectory), f_history

def main():
    # Define data
    A = np.array([
        [4, 1, 0],
        [1, 3, 2],
        [0, 2, 5]
    ], dtype=float)
    b = np.array([-1, -2, -3], dtype=float)
    x_init = np.array([0, 0, 0], dtype='float')
    h_initial = 0.2
    r = 2.0  # Radius for gradient descent constraint

    # Run Coordinate Descent Method
    optimal_x_cd, f_history_cd, x_history_cd = coord_descent(A, b, x_init, h_initial)
    x_vals_cd = np.array([x[0] for x in x_history_cd])
    y_vals_cd = np.array([x[1] for x in x_history_cd])
    z_vals_cd = np.array([x[2] for x in x_history_cd])
    f_vals_cd = f_history_cd

    # Run Gradient Descent Method
    optimal_x_gd, iterations_gd, trajectory_gd, f_history_gd = gradient_descent(A, b, x_init, r)
    x_vals_gd = trajectory_gd[:, 0]
    y_vals_gd = trajectory_gd[:, 1]
    z_vals_gd = trajectory_gd[:, 2]
    f_vals_gd = f_history_gd

    # Print results
    print('Coordinate Descent Result:')
    print('Minimum x:', optimal_x_cd)
    print('Function value at minimum:', f_history_cd[-1])

    print('\nGradient Descent Result:')
    print('Minimum x:', optimal_x_gd)
    print('Function value at minimum:', f_history_gd[-1])

    # Prepare data for visualization
    x_vals = np.concatenate((x_vals_cd, x_vals_gd))
    y_vals = np.concatenate((y_vals_cd, y_vals_gd))
    z_vals = np.concatenate((z_vals_cd, z_vals_gd))
    f_vals = np.concatenate((f_vals_cd, f_vals_gd))

    # Define ranges for visualization
    buffer = 1  # Buffer for ranges
    x_min, x_max = min(x_vals) - buffer, max(x_vals) + buffer
    y_min, y_max = min(y_vals) - buffer, max(y_vals) + buffer
    z_min, z_max = min(z_vals) - buffer, max(z_vals) + buffer

    # Create meshgrid for function surface
    X, Y = np.meshgrid(np.linspace(x_min, x_max, 50),
                       np.linspace(y_min, y_max, 50))

    # Fix Z at the average value for XY projection
    z_fixed_xy = np.mean(z_vals)
    Z_surface_xy = 0.5 * (A[0, 0] * X ** 2 + A[1, 1] * Y ** 2 +
                          (A[0, 1] + A[1, 0]) * X * Y) + b[0] * X + b[1] * Y + \
                   (0.5 * A[2, 2] * z_fixed_xy ** 2 + b[2] * z_fixed_xy)

    # Projection on XZ plane (fix Y)
    Y_fixed_xz = np.mean(y_vals)
    X_xz, Z_xz = np.meshgrid(np.linspace(x_min, x_max, 50),
                             np.linspace(z_min, z_max, 50))
    F_XZ = 0.5 * (A[0, 0] * X_xz ** 2 + A[2, 2] * Z_xz ** 2 +
                  (A[0, 2] + A[2, 0]) * X_xz * Z_xz +
                  (A[0, 1] + A[1, 0]) * X_xz * Y_fixed_xz +
                  (A[1, 2] + A[2, 1]) * Y_fixed_xz * Z_xz) + \
           b[0] * X_xz + b[2] * Z_xz + b[1] * Y_fixed_xz

    # Projection on YZ plane (fix X)
    X_fixed_yz = np.mean(x_vals)
    Y_yz, Z_yz = np.meshgrid(np.linspace(y_min, y_max, 50),
                             np.linspace(z_min, z_max, 50))
    F_YZ = 0.5 * (A[1, 1] * Y_yz ** 2 + A[2, 2] * Z_yz ** 2 +
                  (A[1, 2] + A[2, 1]) * Y_yz * Z_yz +
                  (A[0, 1] + A[1, 0]) * X_fixed_yz * Y_yz +
                  (A[0, 2] + A[2, 0]) * X_fixed_yz * Z_yz) + \
           b[1] * Y_yz + b[2] * Z_yz + b[0] * X_fixed_yz

    # Create figure for plots
    fig = plt.figure(figsize=(18, 14))

    # 3D plot of the function and both trajectories
    ax1 = fig.add_subplot(221, projection='3d')
    # Surface for XY projection
    ax1.plot_surface(X, Y, Z_surface_xy, alpha=0.4, cmap='viridis')
    # Coordinate Descent Trajectory
    ax1.plot(x_vals_cd, y_vals_cd, f_vals_cd, color='r', marker='o', label="Coordinate Descent")
    ax1.scatter(x_vals_cd[-1], y_vals_cd[-1], f_vals_cd[-1], color='r', s=100)
    # Gradient Descent Trajectory
    ax1.plot(x_vals_gd, y_vals_gd, f_vals_gd, color='b', marker='^', label="Gradient Descent")
    ax1.scatter(x_vals_gd[-1], y_vals_gd[-1], f_vals_gd[-1], color='b', s=100)
    ax1.set_title("3D Trajectories of Optimization Methods")
    ax1.set_xlabel("X")
    ax1.set_ylabel("Y")
    ax1.set_zlabel("f(x)")
    ax1.legend()

    # Projection on XY plane
    ax2 = fig.add_subplot(222)
    contour_xy = ax2.contour(X, Y, Z_surface_xy, levels=30, cmap='viridis')
    fig.colorbar(contour_xy, ax=ax2, shrink=0.5, aspect=10)
    ax2.plot(x_vals_cd, y_vals_cd, color='r', marker='o', label="Coordinate Descent")
    ax2.scatter(x_vals_cd[-1], y_vals_cd[-1], color='r', s=100)
    ax2.plot(x_vals_gd, y_vals_gd, color='b', marker='^', label="Gradient Descent")
    ax2.scatter(x_vals_gd[-1], y_vals_gd[-1], color='b', s=100)
    ax2.set_title("Projection on XY Plane")
    ax2.set_xlabel("X")
    ax2.set_ylabel("Y")
    ax2.legend()

    # Projection on XZ plane (fix Y)
    ax3 = fig.add_subplot(223)
    contour_xz = ax3.contour(X_xz, Z_xz, F_XZ, levels=30, cmap='viridis')
    fig.colorbar(contour_xz, ax=ax3, shrink=0.5, aspect=10)
    ax3.plot(x_vals_cd, z_vals_cd, color='r', marker='o', label="Coordinate Descent")
    ax3.scatter(x_vals_cd[-1], z_vals_cd[-1], color='r', s=100)
    ax3.plot(x_vals_gd, z_vals_gd, color='b', marker='^', label="Gradient Descent")
    ax3.scatter(x_vals_gd[-1], z_vals_gd[-1], color='b', s=100)
    ax3.set_title("Projection on XZ Plane")
    ax3.set_xlabel("X")
    ax3.set_ylabel("Z")
    ax3.legend()

    # Projection on YZ plane (fix X)
    ax4 = fig.add_subplot(224)
    contour_yz = ax4.contour(Y_yz, Z_yz, F_YZ, levels=30, cmap='viridis')
    fig.colorbar(contour_yz, ax=ax4, shrink=0.5, aspect=10)
    ax4.plot(y_vals_cd, z_vals_cd, color='r', marker='o', label="Coordinate Descent")
    ax4.scatter(y_vals_cd[-1], z_vals_cd[-1], color='r', s=100)
    ax4.plot(y_vals_gd, z_vals_gd, color='b', marker='^', label="Gradient Descent")
    ax4.scatter(y_vals_gd[-1], z_vals_gd[-1], color='b', s=100)
    ax4.set_title("Projection on YZ Plane")
    ax4.set_xlabel("Y")
    ax4.set_ylabel("Z")
    ax4.legend()

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()